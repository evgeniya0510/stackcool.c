#include <stdio.h>
#include <string.h>
#include <malloc.h>

#define ASIZE 256

char *k;
int Text_Size, Fine_Size;
int BoyerMooreHorspool(char *y, char *x, int y_len, int x_len);
int seek_substring_KMP (char* y, char* x, int N, int M);
void find(char *text);

int main(int argc, char* argv[])
{
	char Find[256];
	char *Text = "I just it seen a monster, And it it it lives under my bed It’s got one eye, 2 eyes, 3 eyes, 4 I don’t know really but it could have more";
	gets(Find);
	
	
 
    printf("Text: %s\n", Text);
   	Text_Size = strlen(Text);
	Fine_Size = strlen(Find);
    printf("Slovo bed vstretilos v %i simvole \n", BoyerMooreHorspool(Text,Find,Text_Size,Fine_Size));
	printf("Slovo bed vstretilos v %i simvole \n", seek_substring_KMP(Text,Find,Text_Size,Fine_Size));
	find(Text);
 
    return 0;
}
	
//---------------------------------------------------------------------------
int BoyerMooreHorspool(char *y, char *x, int y_len, int x_len)
{
	int i,j,k,s = 0;
	int x_table[256]; // таблица символов
 
    if (x_len < y_len)  
    {
		for (i = 0; i < 256; i++) // в таблицу заносится для каждого символа длина подстрока
		{
			x_table[i] = x_len; 
		}
        for (i = 1; i < x_len; i++) // каждому символу из таблицы ставиться в соответствие его порядковый номер из подстроки
		{
			x_table[x[i-1]] = x_len-i;
		}
        i = x_len; // i - счетчик текущего последнего символа в строке
        j = i; // j - счетчик в подстроке кол-ва одинаковых символов (совпадающих с таблицей) с конца 
 
        while ( i <= y_len) // если j==0 то совпадение найдено
        {
			j = x_len; // заново выполняем присваивание, чтобы сравнивать строки с конца
			k = i; // k - счетчик текущего символа в строке
                               // j - счетчик текущего символа в needle
			 while (j > 0 && y[k-1] == x[j-1]) // сравнение последних симолов
			 { // если равны, то сравниваем предыдущие
				--k;
				--j;
			 }
			if (j == 0)
			{
				s++;
			}
		
			 i+=x_table[y[i-1]]; // сдвигаем шаблон на следующий совпадающий символ из таблицы и строка
							// т.е. в подстроке ищется (т.е. уже дан в таблице) последний сравниваемый символ из строки
			
		}

		return s;
	}
    else 
	{	
		return 0; // if (needle_len >= haystack_len)
	}
	
}
int seek_substring_KMP (char* y, char* x, int N, int M)
{
	int i, j;
	int *d =(int*)malloc(M*sizeof(int)); /* динамический массив длины М*/
	/* Вычисление префикс-функции */
	d[0]=0;
	for(i=1,j=0;i<M;i++)
	{
		while(j>0 && x[j]!=x[i])
		{
			j = d[j-1];
		}
		if(x[j]==x[i])
		{
			j++;
		}
		d[i]=j;
	}
	/* поиск */
	for(i=0,j=0;i<N; i++)
	{
		while(j>0 && x[j]!=y[i])
		{
			j=d[j-1];
		}
		if(x[j]==y[i])
		{
			j++;
		}
		if (j==M)
        {
			free (d); /* освобождение памяти массива d */
            return i-j+1;
        }
	}
    free (d); /* освобождение памяти массива d */
	return -1;
}

void find(char *text) 
{
    char sr[256];
	int j,i;
    int counter = 0;
 
    printf("Enter what you need to find: ");
    gets(sr);
    for(j = 0, i = 0; text[j]; j++)
	{
        if(sr[i] == text[j]) 
		{
            i++;
            if(sr[i] == '\0') 
			{
            i = 0;
            counter++;
            }
        }
        else
		{
            j -= i;
            i = 0;
        }
    }
   printf("The word '%s' in the text '%s' found %i time(s)\n", sr, text, counter);
   
}
